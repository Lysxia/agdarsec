module Text.Parser.Examples.Parentheses where

open import Data.Nat.Base
open import Data.Unit
open import Data.Maybe.Base
open import Data.Char
open import Data.List.Base as List hiding ([_])
open import Data.List.Sized.Interface
open import Data.Bool
open import Relation.Nullary
open import Relation.Binary
open import Agda.Builtin.Equality
open import Function

open import Text.Parser.Examples.Base

-- Well-parenthesised string
data PAR : Set where
  LPAR RPAR : PAR
  LCUR RCUR : PAR
  LSQU RSQU : PAR

instance
  {- eqPAR x y             -}
  {- C-c C-c x y           -}
  {- F3 C-c C-f C-c C-a F4 -}
  {- F4 (repeat ‚à£PAR‚à£^2)    -}
  eqPAR : Decidable {A = PAR} _‚â°_
  eqPAR LPAR LPAR = yes refl
  eqPAR LPAR RPAR = no (Œª ())
  eqPAR LPAR LCUR = no (Œª ())
  eqPAR LPAR RCUR = no (Œª ())
  eqPAR LPAR LSQU = no (Œª ())
  eqPAR LPAR RSQU = no (Œª ())
  eqPAR RPAR LPAR = no (Œª ())
  eqPAR RPAR RPAR = yes refl
  eqPAR RPAR LCUR = no (Œª ())
  eqPAR RPAR RCUR = no (Œª ())
  eqPAR RPAR LSQU = no (Œª ())
  eqPAR RPAR RSQU = no (Œª ())
  eqPAR LCUR LPAR = no (Œª ())
  eqPAR LCUR RPAR = no (Œª ())
  eqPAR LCUR LCUR = yes refl
  eqPAR LCUR RCUR = no (Œª ())
  eqPAR LCUR LSQU = no (Œª ())
  eqPAR LCUR RSQU = no (Œª ())
  eqPAR RCUR LPAR = no (Œª ())
  eqPAR RCUR RPAR = no (Œª ())
  eqPAR RCUR LCUR = no (Œª ())
  eqPAR RCUR RCUR = yes refl
  eqPAR RCUR LSQU = no (Œª ())
  eqPAR RCUR RSQU = no (Œª ())
  eqPAR LSQU LPAR = no (Œª ())
  eqPAR LSQU RPAR = no (Œª ())
  eqPAR LSQU LCUR = no (Œª ())
  eqPAR LSQU RCUR = no (Œª ())
  eqPAR LSQU LSQU = yes refl
  eqPAR LSQU RSQU = no (Œª ())
  eqPAR RSQU LPAR = no (Œª ())
  eqPAR RSQU RPAR = no (Œª ())
  eqPAR RSQU LCUR = no (Œª ())
  eqPAR RSQU RCUR = no (Œª ())
  eqPAR RSQU LSQU = no (Œª ())
  eqPAR RSQU RSQU = yes refl

  tokPAR : Tokenizer PAR
  tokPAR = mkTokenizer $ List.foldr (_++_ ‚àò toPAR) [] where

    toPAR : Char ‚Üí List PAR
    toPAR c = if c == '(' then LPAR ‚à∑ []
         else if c == ')' then RPAR ‚à∑ []
         else if c == '{' then LCUR ‚à∑ []
         else if c == '}' then RCUR ‚à∑ []
         else if c == '[' then LSQU ‚à∑ []
         else if c == ']' then RSQU ‚à∑ []
         else [] -- ignoring other characters as noise

module _ {PARS : ‚Ñï ‚Üí Set} {{ùïä : Sized PAR PARS}} where

 PAR‚Ä≤ : [ Parser PAR PARS Maybe ‚ä§ ]
 PAR‚Ä≤ = fix (Parser PAR PARS Maybe ‚ä§) $ Œª rec ‚Üí
         tt <$ ((exact LPAR <&?> rec) <& return (exact RPAR <&?> rec))
     <|> tt <$ ((exact LCUR <&?> rec) <& return (exact RCUR <&?> rec))
     <|> tt <$ ((exact LSQU <&?> rec) <& return (exact RSQU <&?> rec))


-- tests

_ : "hel[{(lo({((wor))ld})wan)t}som{e()[n]o}i(s)e]?" ‚àà PAR‚Ä≤
_ = _ !
