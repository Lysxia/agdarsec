module Text.Parser.Char where

open import Data.Bool.Base
open import Data.Char
open import Data.String as String
open import Data.List.Base hiding ([_])
open import Data.List.NonEmpty as NonEmpty hiding ([_])
open import Category.Monad
open import Function

open import Relation.Unary.Indexed
open import Induction.Nat.Strong
open import Text.Parser.Combinators

instance eqChar = Data.Char._‚âü_

module _ {M : Set ‚Üí Set} {{ùïÑ : RawMonadPlus M}} where

 char : Char ‚Üí [ Parser Char M Char ]
 char = exact

 space : [ Parser Char M Char ]
 space = anyOf (' ' ‚à∑ '\t' ‚à∑ '\n' ‚à∑ [])

 spaces : [ Parser Char M (List‚Å∫ Char) ]
 spaces = list‚Å∫ space

 text : (t : String) {_ : T (not $ null $ String.toList t)} ‚Üí [ Parser Char M String ]
 text t {pr} with String.toList t | pr
 ... | []     | ()
 ... | x ‚à∑ xs | _ = String.fromList ‚àò NonEmpty.toList <$> exacts (x ‚à∑ xs)

 module _ {A : Set} where

  parens : [ ‚ñ° Parser Char M A ‚ü∂ Parser Char M A ]
  parens = between (char '(') (return (char ')'))

  parens? : [ Parser Char M A ‚ü∂ Parser Char M A ]
  parens? = between? (char '(') (return (char ')'))

  withSpaces : [ Parser Char M A ‚ü∂ Parser Char M A ]
  withSpaces A = spaces ?&> A <&? return spaces
